ggplot(means_and_errors, aes(x=rt_mean_0, y=rt_mean_50)) +
geom_point() +
geom_errorbar(aes(ymin=rt_mean_50-rt_se_50, ymax=rt_mean_50+rt_se_50)) +
geom_errorbarh(aes(xmin=rt_mean_0-rt_se_0, xmax=rt_mean_0+rt_se_0)) +
geom_abline() +
scale_x_continuous("0 degrees", limits = lims) +
scale_y_continuous("50 degrees", limits = lims) +
theme(aspect.ratio=1)
fit_rt <- lm(mean_rt_50deg ~ mean_rt_0deg,, data = subject_means_wide)
summary(fit_rt)
plot(fit_rt)
fit_rt <- lm(mean_rt_50deg-mean_rt_0deg ~ mean_rt_0deg,, data = subject_means_wide)
summary(fit_rt)
plot(fit_rt)
vec <- rnorm(1000, mean=1, sd=2)
x <- seq(from = -3, to = 5, length.out = 100)
hist(vec, prob=TRUE)
curve(dnorm(x, mean=mean(vec), sd=sd(vec)), add=TRUE)
library(tidyverse)
df <- data.frame(values = vec)
ggplot(df, aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(-3, 5, by = 1),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$values), sd = sd(df$values)))
ve <- rexp(100, rate = 1.0)
dfe <- data.frame(values = ve)
ggplot(dfe, aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0.0, 5.0, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dexp, args = list(rate = 1.0/mean(df$values)))
set.seed(12345)
n = 25
simulation <- data.frame(group = rbinom(n,1,0.5)) %>%
mutate(value = 1 + 1.5*group + rnorm(n,0,3))
simulation
ggplot(data = simulation, aes(x = as.factor(group), y = value, color = as.factor(group))) +
geom_boxplot() +
geom_jitter(width = 0.5)
observed_diff <- diff(by(simulation$value, simulation$group, mean))
observed_diff
diff(c(1,2,3,4,5))
observed_diff
t.test(value ~ group, data = simulation)
sim_fit <- lm(value ~ group, data = simulation)
summary(sim_fit)
plot(sim_fit)
wilcox.test(value ~ group, data = simulation)
sample(c(1,2,3),10,replace = T)
replicate(10, mean(sample(c(1,2,3),10, replace = T)))
dist <- replicate(2000, diff(by(simulation$value, sample(simulation$group, length(simulation$group), replace = FALSE), mean)))
df_dist <- data.frame(d = dist)
ggplot(df_dist, aes(x = d)) +
geom_histogram(aes(y = ..density..),
colour = "black",
fill = "white")
df_dist %>% filter(abs(d) > abs(observed_diff)) %>% summarize(p = n()/2000)
library(coin)
independence_test(value ~ group, data = simulation)
Input = ("
Individual  Hand     Length
A           Left     17.5
B           Left     18.4
C           Left     16.2
D           Left     14.5
E           Left     13.5
F           Left     18.9
G           Left     19.5
H           Left     21.1
I           Left     17.8
J           Left     16.8
K           Left     18.4
L           Left     17.3
M           Left     18.9
N           Left     16.4
O           Left     17.5
P           Left     15.0
A           Right    17.6
B           Right    18.5
C           Right    15.9
D           Right    14.9
E           Right    13.7
F           Right    18.9
G           Right    19.5
H           Right    21.5
I           Right    18.5
J           Right    17.1
K           Right    18.9
L           Right    17.5
M           Right    19.5
N           Right    16.5
O           Right    17.4
P           Right    15.6
")
Data = read.table(textConnection(Input),header=TRUE)
###  Check the data frame
Data
str(Data)
summary(Data)
ggplot(Data, aes(x = Hand, y = Length, color = Hand)) +
geom_boxplot(aes()) +
geom_jitter(width = 0.2)
group_fit <- lm(Length ~ Hand, data = Data)
summary(group_fit)
plot(group_fit)
ggplot(Data, aes(sample = Length, group = Hand, colour = Hand)) +
geom_qq()
group_test <- t.test(Length ~ Hand, data = Data)
group_test
orig_t = group_test$statistic
orig_t
Data %>% spread(key = Hand, value = Length, sep = "_") -> Data_w
Data_w
lims <- c(min(Data$Length, na.rm = T), max(Data$Length, na.rm = T)) # z povodnych dat
wsplot <-
ggplot(Data_w, aes(x = Hand_Right, y = Hand_Left)) +
geom_point() +
geom_abline() +
scale_x_continuous("Right", limits = lims) +
scale_y_continuous("Left", limits = lims) +
theme(aspect.ratio = 1)
wsplot
pair_fit <- lm(Length ~ Hand + Individual, data = Data)
summary(pair_fit)
plot(pair_fit)
paired_test <- t.test(Data_w$Hand_Right, Data_w$Hand_Left, paired = T)
orig_t <- paired_test$statistic
paired_test
orig_t
n_samples = 2000
t_value <- function(d)
{
df <- d %>%
mutate(test = runif(nrow(d))) %>%
mutate(Hand_L = ifelse(test<0.5, Hand_Left, Hand_Right),
Hand_R = ifelse(test<0.5, Hand_Right, Hand_Left)
)
test.result <- t.test(df$Hand_R, df$Hand_L, paired = T)
return(test.result$statistic)
}
tvec <- replicate(n_samples, t_value(Data_w))
tdf <- data.frame(value = tvec)
ggplot(tdf, aes(x = value)) +
geom_histogram(aes(y =..density..),
colour = "black",
fill = "white")
tdf %>% filter(abs(value) > abs(orig_t)) %>% summarise( p = n()/n_samples)
res <- residuals(pair_fit)
Data$Prediction <- predict(pair_fit, Data)
get_diff <- function(d)
{
df <- d %>%
select(Individual = Individual, Hand = Hand, Prediction = Prediction) %>%
mutate(Length = Prediction + sample(res, size = length(res), replace = T))
df_fit <- lm(Length ~ Hand + Individual, data = df)
return(df_fit$coefficients[2])
}
diff_vec <- replicate(n_samples, get_diff(Data))
diff_df <- data.frame(value = diff_vec)
ggplot(diff_df, aes(x = value)) +
geom_histogram(aes(y =..density..),
colour = "black",
fill = "white")
diff_ci = quantile(diff_vec, c(0.025,0.975))
diff_ci
library(lmPerm)
pair_pfit <- lmp(Length ~ Hand + Individual, data = Data)
summary(pair_pfit)
library(boot)
data <- data.frame(LSAT = c(576, 635,558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594),
GPA  = c(3.39,3.3,2.81,3.03,3.44,3.07,3.0,3.43,3.36,3.13,3.12,2.74,2.76,2.88,2.96))
rho_orig <- corr(data)
rho_orig
rho_boot <- boot(data, corr, R = 10000)
rho_ci <- boot.ci(rho_boot, type = "perc")
rho_ci
df <- data.frame(values = vec)
df
ggplot(df, aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(-3, 5, by = 1),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$values), sd = sd(df$values)))
vexp <- rexp(1000, rate = 1.0)
vexp
vexp <- data.frame(values = rexp(1000, rate = 1.0))
vexp
df <- data.frame(values = rexp(1000, rate = 1.0))
df %>% ggplot(., aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0, 5, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$values), sd = sd(df$values))) geom_histogram(aes(y =..density..),
df <- data.frame(values = rexp(1000, rate = 1.0))
df %>% ggplot(., aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0, 5, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$values), sd = sd(df$values)))
df <- data.frame(values = rexp(1000, rate = 1.0))
df %>% ggplot(., aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0, 5, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dexp, args = list(rate = mean(df$values)))
ve <- rexp(100, rate = 1.0)
dfe <- data.frame(values = ve)
ggplot(dfe, aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0.0, 5.0, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dexp, args = list(rate = 1.0/mean(df$values)))
df <- data.frame(values = rexp(1000, rate = 1.0))
df %>% ggplot(., aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0, 5, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dexp, args = list(rate = 1.0/mean(df$values)))
df <- data.frame(values = rexp(1000, rate = 0.7))
df %>% ggplot(., aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0, 5, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dexp, args = list(rate = 1.0/mean(df$values)))
df <- data.frame(values = rexp(1000, rate = 0.7))
df %>% ggplot(., aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0, 5, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dexp, args = list(rate = mean(df$values)))
df <- data.frame(values = rexp(1000, rate = 0.7))
df %>% ggplot(., aes(x = values)) +
geom_histogram(aes(y =..density..),
breaks = seq(0, 5, by = 0.5),
colour = "black",
fill = "white") +
stat_function(fun = dexp, args = list(rate = 1.0/mean(df$values)))
set.seed(12345)
n = 25
simulation <- data.frame(group = rbinom(n,1,0.5)) %>%
mutate(value = 1 + 1.5*group + rnorm(n,0,3))
simulation
ggplot(data = simulation, aes(x = as.factor(group), y = value, color = as.factor(group))) +
geom_boxplot() +
geom_jitter(width = 0.5)
#set.seed(12345)
n = 25
simulation <- data.frame(group = rbinom(n,1,0.5)) %>%
mutate(value = 1 + 1.5*group + rnorm(n,0,3))
simulation
ggplot(data = simulation, aes(x = as.factor(group), y = value, color = as.factor(group))) +
geom_boxplot() +
geom_jitter(width = 0.5)
#set.seed(12345)
n = 25
simulation <- data.frame(group = rbinom(n,1,0.5)) %>%
mutate(value = 1 + 1.5*group + rnorm(n,0,3))
simulation
ggplot(data = simulation, aes(x = as.factor(group), y = value, color = as.factor(group))) +
geom_boxplot() +
geom_jitter(width = 0.5)
#set.seed(12345)
n = 25
simulation <- data.frame(group = rbinom(n,1,0.5)) %>%
mutate(value = 1 + 1.5*group + rnorm(n,0,3))
simulation
ggplot(data = simulation, aes(x = as.factor(group), y = value, color = as.factor(group))) +
geom_boxplot() +
geom_jitter(width = 0.5)
set.seed(12345)
n = 25
simulation <- data.frame(group = rbinom(n,1,0.5)) %>%
mutate(value = 1 + 1.5*group + rnorm(n,0,3))
simulation
ggplot(data = simulation, aes(x = as.factor(group), y = value, color = as.factor(group))) +
geom_boxplot() +
geom_jitter(width = 0.5)
observed_diff <- diff(by(simulation$value, simulation$group, mean))
observed_diff
by(simulation$value, simulation$group, mean)
diff(c(1,2,3,4,5))
observed_diff
t.test(value ~ group, data = simulation)
sim_fit <- lm(value ~ group, data = simulation)
summary(sim_fit)
plot(sim_fit)
wilcox.test(value ~ group, data = simulation)
sample(c(1,2,3),10,replace = T)
replicate(10, mean(sample(c(1,2,3),10, replace = T)))
dist <- replicate(2000, diff(by(simulation$value, sample(simulation$group, length(simulation$group), replace = FALSE), mean)))
df_dist <- data.frame(d = dist)
ggplot(df_dist, aes(x = d)) +
geom_histogram(aes(y = ..density..),
colour = "black",
fill = "white")
df_dist %>% filter(abs(d) > abs(observed_diff)) %>% summarize(p = n()/2000)
library(coin)
independence_test(value ~ group, data = simulation)
Input = ("
Individual  Hand     Length
A           Left     17.5
B           Left     18.4
C           Left     16.2
D           Left     14.5
E           Left     13.5
F           Left     18.9
G           Left     19.5
H           Left     21.1
I           Left     17.8
J           Left     16.8
K           Left     18.4
L           Left     17.3
M           Left     18.9
N           Left     16.4
O           Left     17.5
P           Left     15.0
A           Right    17.6
B           Right    18.5
C           Right    15.9
D           Right    14.9
E           Right    13.7
F           Right    18.9
G           Right    19.5
H           Right    21.5
I           Right    18.5
J           Right    17.1
K           Right    18.9
L           Right    17.5
M           Right    19.5
N           Right    16.5
O           Right    17.4
P           Right    15.6
")
Data = read.table(textConnection(Input),header=TRUE)
###  Check the data frame
Data
str(Data)
summary(Data)
ggplot(Data, aes(x = Hand, y = Length, color = Hand)) +
geom_boxplot(aes()) +
geom_jitter(width = 0.2)
group_fit <- lm(Length ~ Hand, data = Data)
summary(group_fit)
plot(group_fit)
ggplot(Data, aes(sample = Length, group = Hand, colour = Hand)) +
geom_qq()
group_test <- t.test(Length ~ Hand, data = Data)
group_test
orig_t = group_test$statistic
orig_t
Data %>% spread(key = Hand, value = Length, sep = "_") -> Data_w
Data_w
lims <- c(min(Data$Length, na.rm = T), max(Data$Length, na.rm = T)) # z povodnych dat
wsplot <-
ggplot(Data_w, aes(x = Hand_Right, y = Hand_Left)) +
geom_point() +
geom_abline() +
scale_x_continuous("Right", limits = lims) +
scale_y_continuous("Left", limits = lims) +
theme(aspect.ratio = 1)
wsplot
pair_fit <- lm(Length ~ Hand + Individual, data = Data)
summary(pair_fit)
plot(pair_fit)
paired_test <- t.test(Data_w$Hand_Right, Data_w$Hand_Left, paired = T)
orig_t <- paired_test$statistic
paired_test
orig_t
n_samples = 2000
t_value <- function(d)
{
df <- d %>%
mutate(test = runif(nrow(d))) %>%
mutate(Hand_L = ifelse(test<0.5, Hand_Left, Hand_Right),
Hand_R = ifelse(test<0.5, Hand_Right, Hand_Left)
)
test.result <- t.test(df$Hand_R, df$Hand_L, paired = T)
return(test.result$statistic)
}
tvec <- replicate(n_samples, t_value(Data_w))
tdf <- data.frame(value = tvec)
ggplot(tdf, aes(x = value)) +
geom_histogram(aes(y =..density..),
colour = "black",
fill = "white")
tdf %>% filter(abs(value) > abs(orig_t)) %>% summarise( p = n()/n_samples)
res <- residuals(pair_fit)
Data$Prediction <- predict(pair_fit, Data)
get_diff <- function(d)
{
df <- d %>%
select(Individual = Individual, Hand = Hand, Prediction = Prediction) %>%
mutate(Length = Prediction + sample(res, size = length(res), replace = T))
df_fit <- lm(Length ~ Hand + Individual, data = df)
return(df_fit$coefficients[2])
}
diff_vec <- replicate(n_samples, get_diff(Data))
diff_df <- data.frame(value = diff_vec)
ggplot(diff_df, aes(x = value)) +
geom_histogram(aes(y =..density..),
colour = "black",
fill = "white")
diff_ci = quantile(diff_vec, c(0.025,0.975))
diff_ci
library(lmPerm)
pair_pfit <- lmp(Length ~ Hand + Individual, data = Data)
summary(pair_pfit)
anscombe
library(tidyverse)
anscombe %>%
gather(label, value) %>%
mutate(i = rep(1:11,8)) %>%
separate(label, into = c("xy","set"), sep = 1) %>%
spread(xy, value) %>%
select(-i) -> my_anscombe
my_anscombe
ggplot(data = my_anscombe, aes(x = x, y = y)) +
facet_wrap(~ set) +
geom_point() +
geom_smooth(method = "lm", fullrange = T)
library(datasets)
library(help = "datasets")
library(tidyverse)
anscombe %>%
gather(label, value)
library(tidyverse)
anscombe %>%
gather(label, value) % To je ale kravina
library(tidyverse)
anscombe %>%
gather(label, value) %>%     # label: názvy stĺpca (x1, x2, ... y4), value: hodnoty
mutate(i = rep(1:11,8)) %>%  # nový stĺpec s poradím hodnôt
separate(label, into = c("xy","set"), sep = 1) %>%    # oddelíme z label 1. znak, čo je 'x' alebo 'y'.
spread(xy, value) %>%        # teraz rozdelíme stĺpec value do dvoch stĺpcov x a y podľa stlpca xy.
select(-i) -> my_anscombe    # stĺpec i zahodíme.
my_anscombe
ggplot(data = my_anscombe, aes(x = x, y = y)) +
facet_wrap(~ set) +
geom_point() +
geom_smooth(method = "lm", fullrange = T)
anscombe
library(tidyverse)
anscombe %>%
gather(label, value) %>%     # label: názvy stĺpca (x1, x2, ... y4), value: hodnoty
mutate(i = rep(1:11,8)) %>%  # nový stĺpec s poradím hodnôt
separate(label, into = c("xy","set"), sep = 1) %>%    # oddelíme z label 1. znak, čo je 'x' alebo 'y'.
spread(xy, value) %>%        # teraz rozdelíme stĺpec value do dvoch stĺpcov x a y podľa stlpca xy.
select(-i) -> my_anscombe    # stĺpec i zahodíme.
my_anscombe
ggplot(data = my_anscombe, aes(x = x, y = y)) +
facet_wrap(~ set) +
geom_point() +
geom_smooth(method = "lm", fullrange = T)
library(datasets)
library(help = "datasets")
anscombe
library(tidyverse)
anscombe %>%
gather(label, value) %>%     # label: názvy stĺpca (x1, x2, ... y4), value: hodnoty
mutate(i = rep(1:11,8)) %>%  # nový stĺpec s poradím hodnôt
separate(label, into = c("xy","set"), sep = 1) %>%    # oddelíme z label 1. znak, čo je 'x' alebo 'y'.
spread(xy, value) %>%        # teraz rozdelíme stĺpec value do dvoch stĺpcov x a y podľa stlpca xy.
select(-i) -> my_anscombe    # stĺpec i zahodíme.
my_anscombe
ggplot(data = my_anscombe, aes(x = x, y = y)) +
facet_wrap(~ set) +
geom_point() +
geom_smooth(method = "lm", fullrange = T)
library(datasets)
library(help = "datasets")
anscombe
library(tidyverse)
anscombe %>%
gather(label, value) %>%     # label: názvy stĺpca (x1, x2, ... y4), value: hodnoty
mutate(i = rep(1:11,8)) %>%  # nový stĺpec s poradím hodnôt
separate(label, into = c("xy","set"), sep = 1) %>%    # oddelíme z label 1. znak, čo je 'x' alebo 'y'.
spread(xy, value) %>%        # teraz rozdelíme stĺpec value do dvoch stĺpcov x a y podľa stlpca xy.
select(-i) -> my_anscombe    # stĺpec i zahodíme.
my_anscombe
ggplot(data = my_anscombe, aes(x = x, y = y)) +
facet_wrap(~ set) +
geom_point() +
geom_smooth(method = "lm", fullrange = T)
library(datasets)
library(help = "datasets")
anscombe
library(tidyverse)
anscombe %>%
gather(label, value) %>%     # label: názvy stĺpca (x1, x2, ... y4), value: hodnoty
mutate(i = rep(1:11,8)) %>%  # nový stĺpec s poradím hodnôt
separate(label, into = c("xy","set"), sep = 1) %>%    # oddelíme z label 1. znak, čo je 'x' alebo 'y'.
spread(xy, value) %>%        # teraz rozdelíme stĺpec value do dvoch stĺpcov x a y podľa stlpca xy.
select(-i) -> my_anscombe    # stĺpec i zahodíme.
my_anscombe
ggplot(data = my_anscombe, aes(x = x, y = y)) +
facet_wrap(~ set) +
geom_point() +
geom_smooth(method = "lm", fullrange = T)
library(datasets)
library(help = "datasets")
setwd("~/GitHub/RTutorial")
